Q1
import math
def minimax(curDepth,nodeIndex,maxTurn,scores,targetDepth):
    if(curDepth==targetDepth):
        return scores[nodeIndex]
    if(maxTurn):
        return max(minimax(curDepth + 1, nodeIndex *2,False,scores,targetDepth),
        minimax(curDepth + 1,nodeIndex * 2 + 1,False,scores,targetDepth))
    else:
        return min(minimax(curDepth + 1, nodeIndex *2,True,scores,targetDepth),
        minimax(curDepth + 1,nodeIndex * 2 + 1,True,scores,targetDepth))       
scores=[3,5,2,9,12,5,23,23]
treeDepth=math.log(len(scores),2)
print("The optimal value: ",end="")
print(minimax(0,0,True,scores,treeDepth))        

Q2
N=8
def solveNQueens(board,col):
    if col==N:
        print(board)
        return True
    for i in range (N):
        if isSafe(board,i,col):
            board[i][col]=1
            if solveNQueens(board,col+1):
                return True
            board[i][col]=0
    return False

def isSafe(board,row,col):
    for x in range(col):
        if board[row][x]==1:
            return False
    for x,y in zip(range(row,-1,-1),range(col,-1,-1)):
        if board[x][y]==1:
            return False
    for x,y in zip(range(row,N,1),range(col,-1,-1)):
        if board[x][y]==1:
            return False
    return True
board=[[0 for x in range (N)] for y in range(N)]
if not solveNQueens(board,0):
    print("No solution found")                                                
