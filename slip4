Q1
import random 
def get_random_word():
	words = ['python','game','text','durvesh']
	return random.choice(words)
	
def display(word,guess_letter):
	return ''.join([letter if letter in guess_letter else ' _ ' for letter in word])
	
def hangman():
	word = get_random_word()
	guess_letter=set()
	attempt = 6
	print("Welcome to Hangman")
	print("Guess the word")
	
	while attempt > 0:
		print(display (word,guess_letter))
		guess = input("Enter letter : ").lower()
	
		if len(guess)!=1 or not guess.isalpha():
			print("Please  enter a single alphabet")
			continue
	
		if guess in guess_letter:
			print("You have already guessed the letter")
			continue
		
		guess_letter.add(guess)
	
		if guess in word:
			print("Good guess !",guess," is in the word\n")
			if all (letter in guess_letter for letter in word):
				print("You guessed the word , the word was",word)
				break
			
		else:
			attempt-=1
			print(guess,"is not in the word, You have",attempt,"attempts left\n")
	
	if (attempt==0):
		print("Game Over,  The word was",word)
		
hangman()

Q2
from collections import deque
def bfs(graph,start):
    visited=set()
    queue=deque([start])
    traversal_order=[]
    while queue:
        node=queue.popleft()
        if node not in visited:
            visited.add(node)
            traversal_order.append(node)
            for neighbour in graph[node]:
                if neighbour not in visited:
                    queue.append(neighbour)
    return traversal_order

graph={
        'A':['B','C'],
        'B':['D','E'],
        'C':['F','G'],
        'D':[],'E':[],'F':[],'G':[]
        }

start_node='A'
res=bfs(graph,start_node)
print("BFS Traversal : ",res)
