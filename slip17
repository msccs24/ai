Q1
import numpy as np
def objective_function(x):
    return -x**2+4*x

def hill_climbing(initial_x,step_size,num_steps):
   current_x=initial_x
   for step in range(num_steps):
       current_value=objective_function(current_x)
       next_x=current_x + step_size
       next_value=objective_function(next_x)
       if next_value > current_value:
           current_x=next_x
   return current_x,objective_function(current_x)
   
initial_x=0.0
step_size=0.1
num_steps=100

result_x,result_value=hill_climbing(initial_x,step_size,num_steps)

print(f"Maximum found at x={result_x}")
print(f"Maximum value is {result_value}")

Q2
import heapq
def astar(graph,start_node,end_node):
    f_distance={node:float('inf')for node in graph}
    f_distance[start_node]=0

    g_distance={node: float('inf')for node in graph}
    g_distance[start_node]=0

    came_from={node:None for node in graph}
    came_from[start_node]=start_node

    queue=[(0,start_node)]

    while queue:
        current_f_distance,current_node=heapq.heappop(queue)
        if current_node == end_node:
            print("Path found")
            return f_distance,came_from
    
        for next_node,(weight,heuristic)in graph[current_node].items():
            temp_g_distance = g_distance[current_node] + weight
        
            if temp_g_distance < g_distance[next_node]:
                g_distance[next_node] = temp_g_distance
                f_distance[next_node] = temp_g_distance + heuristic
            
                came_from[next_node] = current_node
            
                heapq.heappush(queue,(f_distance[next_node],next_node))
            
    return f_distance,came_from
graph={
    'A':{'B':(4,2),'C':(5,3)},
    'B':{'D':(6,4),'E':(4,1)},
    'C':{'E':(4,2)},
    'D':{'F':(5,1)},
    'E':{'F':(2,0)},
    'F':{}
}
      
f_distance,came_from=astar(graph,'A','F')
print(f"f_distance:{f_distance}")
print(f"came_from:{came_from}")
