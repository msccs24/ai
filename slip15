Q1
import random
class Monkey:

    def __init__(self,bananas):
        self.bananas=bananas
    def __repr__(self):
        return "Monkey with %d bananas" %self.bananas

monkey=[Monkey(random.randint(0,50)) for i in range(5)]
print('random monkeys:')
print(monkey)
print()
def number_of_bananas(monkey):
    return monkey.bananas
print("number_of_bananas(First Monkey)):",number_of_bananas(monkey[0]))   
print()
max_monkey=max(monkey,key=number_of_bananas)
print('max monkey:',max_monkey) 

Q2
graph={'A':['B','C'],
        'B':['D','E'],
        'C':['F','G'],
        'D':['H'],
       'E':[],
       'F':[],
       'G':[],
       'H':[]
      }   

def DFS(currentnode, destination, graph, maxDepth):
    print(currentnode)
    if currentnode == destination:
        return True
    
    if maxDepth <= 0:
        return False
    
    for node in graph[currentnode]:
       if DFS(node, destination, graph, maxDepth-1):
        return True

    return False

def IDDFS(currentnode, destination, graph, maxDepth):
    for i in range(maxDepth):
        if DFS(currentnode, destination, graph, i):
            return True
        
    return False

if not IDDFS('A','E',graph, 4):
    print("Path is not available")

else: 
      print("pathÂ exists")
